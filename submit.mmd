sequenceDiagram
    participant User
    participant EditView
    participant KeyboardHandler
    participant MessageEditorContext
    participant Store
    participant Modal
    participant APIService

    Note over EditView: Component renders based on isComposer

    alt Button Interactions
        alt 1. Composer Mode
            rect rgb(240,230,255)
                User->>EditView: Click "Save & Submit"
                EditView->>MessageEditorContext: Call handleSaveAndSubmit()
                MessageEditorContext->>Store: Add message to chat
                
                rect rgb(230,245,255)
                    Note over Store: AI Response Phase
                    Store->>APIService: Submit conversation context
                    APIService-->>Store: Stream AI response
                    
                    loop For each token
                        Store->>Store: Update AI message content
                        Store-->>EditView: Render updated content
                    end
                end
                
                MessageEditorContext->>Store: Clear input
                MessageEditorContext->>EditView: Reset textarea height
            end

            rect rgb(230,255,255)
                User->>EditView: Click "Save"
                EditView->>MessageEditorContext: Call handleSave()
                MessageEditorContext->>Store: Store draft content
            end
        else 2. Non-Composer Mode (Edit)
            rect rgb(255,255,230)
                User->>EditView: Click "Save"
                EditView->>MessageEditorContext: Call handleSave()
                MessageEditorContext->>Store: Update message content
                MessageEditorContext->>EditView: Exit edit mode
            end

            rect rgb(255,230,230)
                User->>EditView: Click "Save & Submit"
                EditView->>Modal: Open confirmation modal
                User->>Modal: Confirm
                Modal->>MessageEditorContext: Call handleSaveAndSubmit()
                MessageEditorContext->>Store: Update message content
                MessageEditorContext->>Store: Remove subsequent messages
                MessageEditorContext->>Store: Trigger regeneration
                
                rect rgb(230,245,255)
                    Note over Store: AI Response Phase
                    Store->>APIService: Submit updated conversation context
                    APIService-->>Store: Stream AI response
                    
                    loop For each token
                        Store->>Store: Update AI message content
                        Store-->>EditView: Render updated content
                    end
                end
                
                MessageEditorContext->>EditView: Exit edit mode
            end

            rect rgb(230,230,255)
                User->>EditView: Click "Cancel"
                EditView->>MessageEditorContext: Call setIsEdit(false)
                MessageEditorContext->>EditView: Exit edit mode without saving
            end
        end
    else Keyboard Shortcuts
        Note over KeyboardHandler: Keyboard actions trigger the same flows as buttons
        
        alt Composer Mode
            rect rgb(240,255,240)
                User->>KeyboardHandler: Press key combination
                
                alt "Enter to Submit" enabled
                    KeyboardHandler->>MessageEditorContext: Enter → handleSaveAndSubmit()
                    KeyboardHandler->>EditView: Shift+Enter → Insert newline
                else "Enter to Submit" disabled
                    KeyboardHandler->>EditView: Enter → Insert newline
                    KeyboardHandler->>MessageEditorContext: Ctrl+Enter/Shift+Enter → handleSaveAndSubmit()
                end
                
                Note right of KeyboardHandler: handleSaveAndSubmit() triggers same flow as "Save & Submit" button
            end
        else Non-Composer Mode (Edit)
            rect rgb(240,240,255)
                User->>KeyboardHandler: Press key combination
                
                alt Escape key
                    KeyboardHandler->>MessageEditorContext: setIsEdit(false)
                    MessageEditorContext->>EditView: Exit edit mode without saving
                else Ctrl+Shift+Enter
                    KeyboardHandler->>MessageEditorContext: handleSaveAndSubmit()
                    Note right of KeyboardHandler: Same flow as "Save & Submit" button in edit mode
                else Ctrl+Enter/Shift+Enter
                    KeyboardHandler->>MessageEditorContext: handleSave()
                    Note right of KeyboardHandler: Same flow as "Save" button in edit mode
                end
            end
        end
    end

    Note over EditView: Buttons disabled during generation

    alt 6. Regeneration Flow
        User->>EditView: Click "Regenerate" button
        EditView->>Store: regenerateMessage()
        
        rect rgb(240,240,240)
            Note over Store: State Update Phase
            Store->>Store: Clone current chat
            Store->>Store: Find last message
            Store->>Store: Mark last message as outdated
            Store->>Store: Add new placeholder message
            Store->>Store: Update store state
        end
        
        rect rgb(230,240,255)
            Note over EditView: UI Update Phase
            Store-->>EditView: State changes
            EditView->>EditView: Render outdated message (dimmed)
            EditView->>EditView: Show loading state for new message
        end
        
        rect rgb(255,240,230)
            Note over Store: API Phase
            Store->>APIService: Submit conversation context
            APIService-->>Store: Stream new response
            
            loop For each token
                Store->>Store: Update new message content
                Store-->>EditView: Render updated content
            end
        end
        
        rect rgb(230,255,240)
            Note over EditView: Final State
            EditView->>EditView: Show both messages:
            Note over EditView: 1. Previous (dimmed, marked as outdated)
            Note over EditView: 2. New (normal, marked as current)
        end
    end
